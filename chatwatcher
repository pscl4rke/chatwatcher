#!/usr/bin/env python

# This was heavily inspired by muc.py in the sleekxmpp examples.

import sys
import logging
import ConfigParser as configparser
import subprocess
import string

import sleekxmpp


class AttriDict(dict):
    """Like a dictionary, but also like an object."""

    def __getattr__(self, key):
        """Allow keys to be accessed like attributes."""
        return self[key]


class OptionParser:
    """Build a structure."""

    def __init__(self):
        """Create a new OptionParser."""
        self.top_level_sections = []

    def add_top_level_section(self, section):
        """Declare that a given section's options are top-level."""
        self.top_level_sections.append(section)

    def build(self, filename):
        """Build an options struction from the given file."""
        parser = configparser.ConfigParser()
        parser.read(filename)
        options = AttriDict()
        for section in parser.sections():
            if section in self.top_level_sections:
                for option in parser.options(section):
                    options[option] = parser.get(section, option)
            else:
                options[section] = AttriDict()
                for option in parser.options(section):
                    options[section][option] = parser.get(section, option)
        return options


class ChatWatcher(sleekxmpp.ClientXMPP):
    """Enters a chat room and acts upon messages said."""

    def __init__(self, options):
        """Create a new ChatWatcher, logging on with given details."""
        self.options = options
        sleekxmpp.ClientXMPP.__init__(self,
            options.account.jid, options.account.password)
        self.add_event_handler("session_start", self.start)
        self.add_event_handler("groupchat_message", self.message)
        self.register_plugin('xep_0030') # Service Discovery
        self.register_plugin('xep_0045') # Multi-User Chat
        self.register_plugin('xep_0199') # XMPP Ping

    def start(self, event):
        """Event handler for an initial successful connection."""
        self.get_roster()
        self.send_presence()
        self.plugin['xep_0045'].joinMUC(
            self.options.room.id,
            self.options.room.alias,
            password=self.options.room.password,
            wait=True
        )

    def message(self, message):
        """Event handler for an incoming chat message."""
        # Available: type, to, from, nick, subject, body, html ???
        announcement = string.Template(self.options.handler.pipein + "\n")
        process = subprocess.Popen(self.options.handler.command, shell=True,
                                            stdin=subprocess.PIPE)
        process.communicate(announcement.safe_substitute(message))
        process.wait()


def log_level(options):
    """Return the logging level according to the options."""
    levels = {
        'debug': logging.DEBUG, 'info': logging.INFO,
        'warning': logging.WARNING, 'error': logging.ERROR,
        'critical': logging.CRITICAL}
    if options.verbosity.lower() not in levels:
        raise Exception("Unknown verbosity '%s'" % options.verbosity)
    return levels[options.verbosity.lower()]


def usage():
    print "Usage:"
    print "    %s /path/to/settings.cfg" % sys.argv[0]


def main():
    # Get config file:
    if len(sys.argv) != 2:
        usage()
        sys.exit(1)
    config_file = sys.argv[1]
    # Load config file:
    parser = OptionParser()
    parser.add_top_level_section('general')
    options = parser.build(config_file)
    # Prepare to connect:
    logging.basicConfig(level=log_level(options))
    # Connect:
    chatwatcher = ChatWatcher(options)
    connected = chatwatcher.connect()
    assert connected
    # Start the handling loop:
    chatwatcher.process(block=True)


if __name__ == '__main__':
    main()

